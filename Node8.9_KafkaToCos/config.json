{
    "serverless-cloud-function-application": {
      "application": {
        "Chinese": {
          "name": "kafka消息上传到cos",
          "description": "本示例通过配置kafka触发器，从kafka接收到消息后，写入文件并上传到cos中",
          "attention": "需要配置kafka触发器，并在cos中创建一个bucket",
          "readme": {
            "file": "",
            "content": ""
          },
          "license": {
            "file": "",
            "content": "公开"
          },
          "author": {
            "name": "腾讯云无服务器云函数团队"
          }
        },
        "English": {
          "name": "KafkaMsg_To_Cos",
          "description": "This function will collect message from ckafka, then upload it to cos",
          "attention": "You need to config ckafka trigger and create your bucket in cos",
          "readme": {
            "file": "", // readme file
            "content": "" //content of readme
          },
          "license": {
            "file": "", // license file
            "content": "Open" //content of license
          },
          "author": {
            "name": "Tencent Cloud Serverless Team" // author
          }
        },
        "input_parameters": {
          "event": "",
          "context": ""
        },
        "output_parameters": {},
        "download_address": "https://github.com/tencentyun/scf-demo-repo/tree/master/Node8.9_KafkaToCos", //demo's git download url
        "tags": [
          "Ckafka",
          "Nodejs8.9",
          "Cos" 
          // The tags only support English and can be multiple, we suggest you to use keywords such as runtime, trigger, environment and so on
          // 标签统一为英文，可编写多个，建议使用runtime、触发器、场景等关键字，用户可以通过该关键字搜索。前台需要展示，请认真填写，不支持中文
        ],
        "version": "1.0.5" 
        // Version number, which identifies the demo version status. 
        // Demo will not to update to the page if the version number unmodified.
        //版本号，通过版本号标识 demo 升级情况，未修改版本号会导致 demo 不更新至页面
      },
      "functions": {
        "name": "Kafka_To_Cos", // Function name which only be in English. 函数名称，只支持英文
        "description": "本示例通过配置kafka触发器，从kafka接收到消息后，写入文件并上传到cos中",
        "handler": "index.main_handler",
        "memorySize": 128, //Running memory.  运行配置内存
        "timeout": 3, // Running timeout.运行超时时间
        "runtime": "Nodejs8.9", //Runtime which users can search demo by this keyword. 运行环境，用户可以通过该关键字搜索["Python2.7", "Python3.6", "Nodejs6.10", "Java8", "LuaCDN", "NodejsCDN", "Php5", "Php7", "Nodejs8.9", "Go1"]
        "Environment": {}, // Optional, used to define environment variables. 可选，用于定义环境变量
        "Events": {}, // Optional, used define the event source that triggers this function.  可选，用于定义触发此函数的事件源
        "VpcConfig": {}, // Optional, used configure cloud function's private network. 可选， 用于配置云函数访问 VPC 私有网络。
        "codeObject": {
          "codeFile": [
            "index.js"
          ],
          "CodeUri": [
            // Code download url which should be same as 'download_address'. 代码下载地址，和download_address保持一致
            "https://github.com/tencentyun/scf-demo-repo/tree/master/Node8.9_KafkaToCos"
          ]
        }
      }
    }
  }
